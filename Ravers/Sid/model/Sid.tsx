/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useEffect, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { AnimationMixer, Object3D } from 'three';
import { SkeletonUtils } from '../../utils/SkeletonUtils';

type GLTFResult = GLTF & {
  nodes: {
    Female_1002_MBLab_human_female004_Baked: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
    SID_Armature: THREE.Object3D;
  };
  materials: {
    ['Female_1.002_MBLab_human_female.004_Bake1_baked']: THREE.MeshStandardMaterial;
  };
};

type ActionName = 'SID Sambax';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const MODEL_URL =
  'https://ravers-models.s3.us-east-2.amazonaws.com/RAVERz_AVATARzSIDCOMPRESS.glb';

export default function SidModel(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(MODEL_URL) as GLTFResult;

  Object.values(materials).forEach((material) => (material.skinning = true));
  const actions = useRef<GLTFActions>();
  const [mixer, setMixer] = useState<AnimationMixer | undefined>();
  const [armature, setArmature] = useState<Object3D | undefined>();

  useEffect(() => {
    const _armature = SkeletonUtils.clone(nodes.SID_Armature) as Object3D;

    _armature.traverse((obj) => (obj.frustumCulled = false));
    const _mixer = new AnimationMixer(_armature);

    // @ts-ignore
    actions.current = animations.reduce((acc, cur) => {
      const name = cur.name as ActionName;
      // @ts-ignore
      acc[name] = _mixer.clipAction(cur, group.current);
      return acc;
    }, {});

    // @ts-ignore
    actions.current['SID Sambax'].play();

    setMixer(_mixer);
    setArmature(_armature);
  }, []);

  useFrame((_, delta) => {
    mixer && mixer.update(delta);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[0, 1.32, 0]} frustumCulled={false}>
        <group
          rotation-x={Math.PI / 2}
          scale={0.00615}
          position-y={0}
          frustumCulled={false}
        >
          {<primitive object={nodes.mixamorigHips} />}
          <skinnedMesh
            frustumCulled={false}
            geometry={nodes.Female_1002_MBLab_human_female004_Baked.geometry}
            material={
              materials['Female_1.002_MBLab_human_female.004_Bake1_baked']
            }
            skeleton={nodes.Female_1002_MBLab_human_female004_Baked.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(MODEL_URL);
